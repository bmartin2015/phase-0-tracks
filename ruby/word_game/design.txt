Using plain old English in a text file or other scratch pad, pseudocode a class for a word-guessing game that meets the following specifications. Assume your driver code will handle input and output as far as the user is concerned. In other words, write a class designed for a computer program to use, not one designed for a human to use directly, then use driver code to bridge the gap between human and Ruby object.

One user can enter a word (or phrase, if you would like your game to support that)
another user attempts to guess the word.
Guesses are limited, and the number of guesses available is related to the length of the word.



Repeated guesses do not count against the user.

The guessing player receives continual feedback on the current state of the word. So if the secret word is "unicorn", the user will start out seeing something like "_ _ _ _ _ _ _", which would become "_ _ _ c _ _ _" after the user enters a guess of "c".

The user should get a congratulatory message if they win, and a taunting message if they lose.

PSUDOCODE

Get word/phrase to guess
Calculate guesses (5 per letter)
Initialize both guess and answer array

Loop until out of guesses or answer is correct
	Print out feedback from guess array ("_ _ _ _ _") using "_" for unknown letters
	Get guess word
	If the guess is correct
		add letter to the guess array
	if guess is duplicate
		let user know it was already guessed, but don't deduct count
	If guess is wrong
		let user know it was wrong and deduct 1 from guess count

If the user won - print congratulatory message
If the user lost - print taunting message



